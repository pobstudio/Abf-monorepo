/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';
import type { PromiseOrValue } from '../../../common';
import type {
  BackgroundSvgRenderer,
  BackgroundSvgRendererInterface,
} from '../../../contracts/renderers/BackgroundSvgRenderer';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: 'additionalMetadataURI',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'props',
        type: 'bytes',
      },
    ],
    name: 'attributes',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'propsSize',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'props',
        type: 'bytes',
      },
    ],
    name: 'render',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renderAttributeKey',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'props',
        type: 'bytes',
      },
    ],
    name: 'renderRaw',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6118498061010d6000396000f3fe608060405234801561001057600080fd5b506004361061009d5760003560e01c80638da5cb5b116100665780638da5cb5b1461015a57806392348b2214610178578063b0a2f64014610196578063effde6db146101c6578063f2fde38b146101e45761009d565b8062a85d69146100a257806301ffc9a7146100c0578063316df61e146100f057806343c5820c14610120578063715018a614610150575b600080fd5b6100aa610200565b6040516100b7919061118e565b60405180910390f35b6100da60048036038101906100d59190610d40565b610209565b6040516100e791906110ba565b60405180910390f35b61010a60048036038101906101059190610d69565b610283565b604051610117919061110c565b60405180910390f35b61013a60048036038101906101359190610d69565b6102be565b604051610147919061110c565b60405180910390f35b610158610504565b005b610162610518565b60405161016f919061109f565b60405180910390f35b610180610527565b60405161018d919061110c565b60405180910390f35b6101b060048036038101906101ab9190610d69565b610547565b6040516101bd919061110c565b60405180910390f35b6101ce6105ff565b6040516101db919061110c565b60405180910390f35b6101fe60048036038101906101f99190610d17565b61063c565b005b60006007905090565b60007f32ce7999000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061027c575061027b826106c0565b5b9050919050565b606061029761029284846102be565b61072a565b6040516020016102a7919061107d565b604051602081830303815290604052905092915050565b6060600061031184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505060006108b4565b9050600061036485858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505060026108b4565b90506103738261ffff1661091b565b6103808261ffff1661091b565b73__$8d2f2c422d7739f572e222809bbf6b68c3$__635f47386a888860038181106103d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b89896004818110610418577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b8a8a600581811061045c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b6040518463ffffffff1660e01b8152600401610484939291906110d5565b60006040518083038186803b15801561049c57600080fd5b505af41580156104b0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104d99190610dae565b6040516020016104eb93929190610ff3565b6040516020818303038152906040529250505092915050565b61050c610ac8565b6105166000610b46565b565b6000610522610c0a565b905090565b60606040518060800160405280604281526020016117d260429139905090565b606060005b600060f81b84848381811061058a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146105ce5780806105c69061143f565b91505061054c565b6105d78161091b565b6040516020016105e79190611050565b60405160208183030381529060405291505092915050565b60606040518060400160405280600581526020017f696d616765000000000000000000000000000000000000000000000000000000815250905090565b610644610ac8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ab9061112e565b60405180910390fd5b6106bd81610b46565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b606060008251141561074d576040518060200160405280600081525090506108af565b6000604051806060016040528060408152602001611792604091399050600060036002855161077c9190611226565b610786919061127c565b600461079291906112ad565b67ffffffffffffffff8111156107d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156108035781602001600182028036833780820191505090505b509050600182016020820185865187015b8082101561086f576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050610814565b505060038651066001811461088b576002811461089e576108a6565b603d6001830353603d60028303536108a6565b603d60018303535b50505080925050505b919050565b60006002826108c39190611226565b83511015610906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fd9061114e565b60405180910390fd5b60008260028501015190508091505092915050565b60606000821415610963576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610ac3565b600082905060005b6000821461099557808061097e9061143f565b915050600a8261098e919061127c565b915061096b565b60008167ffffffffffffffff8111156109d7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610a095781602001600182028036833780820191505090505b5090505b60008514610abc57600182610a229190611307565b9150600a85610a319190611488565b6030610a3d9190611226565b60f81b818381518110610a79577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85610ab5919061127c565b9450610a0d565b8093505050505b919050565b610ad0610c33565b73ffffffffffffffffffffffffffffffffffffffff16610aee610518565b73ffffffffffffffffffffffffffffffffffffffff1614610b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3b9061116e565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600033905090565b6000610c4e610c49846111ce565b6111a9565b905082815260208101848484011115610c6657600080fd5b610c718482856113db565b509392505050565b600081359050610c8881611763565b92915050565b600081359050610c9d8161177a565b92915050565b60008083601f840112610cb557600080fd5b8235905067ffffffffffffffff811115610cce57600080fd5b602083019150836001820283011115610ce657600080fd5b9250929050565b600082601f830112610cfe57600080fd5b8151610d0e848260208601610c3b565b91505092915050565b600060208284031215610d2957600080fd5b6000610d3784828501610c79565b91505092915050565b600060208284031215610d5257600080fd5b6000610d6084828501610c8e565b91505092915050565b60008060208385031215610d7c57600080fd5b600083013567ffffffffffffffff811115610d9657600080fd5b610da285828601610ca3565b92509250509250929050565b600060208284031215610dc057600080fd5b600082015167ffffffffffffffff811115610dda57600080fd5b610de684828501610ced565b91505092915050565b610df88161133b565b82525050565b610e078161134d565b82525050565b610e1681611359565b82525050565b6000610e27826111ff565b610e31818561120a565b9350610e418185602086016113db565b610e4a81611546565b840191505092915050565b6000610e60826111ff565b610e6a818561121b565b9350610e7a8185602086016113db565b80840191505092915050565b6000610e9360028361121b565b9150610e9e82611557565b600282019050919050565b6000610eb660268361120a565b9150610ec182611580565b604082019050919050565b6000610ed960148361120a565b9150610ee4826115cf565b602082019050919050565b6000610efc600a8361121b565b9150610f07826115f8565b600a82019050919050565b6000610f1f60088361121b565b9150610f2a82611621565b600882019050919050565b6000610f4260208361120a565b9150610f4d8261164a565b602082019050919050565b6000610f65602f8361121b565b9150610f7082611673565b602f82019050919050565b6000610f8860148361121b565b9150610f93826116c2565b601482019050919050565b6000610fab60268361121b565b9150610fb6826116eb565b602682019050919050565b6000610fce601a8361121b565b9150610fd98261173a565b601a82019050919050565b610fed816113d1565b82525050565b6000610ffe82610f58565b915061100a8286610e55565b915061101582610eef565b91506110218285610e55565b915061102c82610f7b565b91506110388284610e55565b915061104382610f12565b9150819050949350505050565b600061105b82610f9e565b91506110678284610e55565b915061107282610e86565b915081905092915050565b600061108882610fc1565b91506110948284610e55565b915081905092915050565b60006020820190506110b46000830184610def565b92915050565b60006020820190506110cf6000830184610dfe565b92915050565b60006060820190506110ea6000830186610e0d565b6110f76020830185610e0d565b6111046040830184610e0d565b949350505050565b600060208201905081810360008301526111268184610e1c565b905092915050565b6000602082019050818103600083015261114781610ea9565b9050919050565b6000602082019050818103600083015261116781610ecc565b9050919050565b6000602082019050818103600083015261118781610f35565b9050919050565b60006020820190506111a36000830184610fe4565b92915050565b60006111b36111c4565b90506111bf828261140e565b919050565b6000604051905090565b600067ffffffffffffffff8211156111e9576111e8611517565b5b6111f282611546565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000611231826113d1565b915061123c836113d1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611271576112706114b9565b5b828201905092915050565b6000611287826113d1565b9150611292836113d1565b9250826112a2576112a16114e8565b5b828204905092915050565b60006112b8826113d1565b91506112c3836113d1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156112fc576112fb6114b9565b5b828202905092915050565b6000611312826113d1565b915061131d836113d1565b9250828210156113305761132f6114b9565b5b828203905092915050565b6000611346826113b1565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156113f95780820151818401526020810190506113de565b83811115611408576000848401525b50505050565b61141782611546565b810181811067ffffffffffffffff8211171561143657611435611517565b5b80604052505050565b600061144a826113d1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561147d5761147c6114b9565b5b600182019050919050565b6000611493826113d1565b915061149e836113d1565b9250826114ae576114ad6114e8565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f7d2c000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f746f55696e7431365f6f75744f66426f756e6473000000000000000000000000600082015250565b7f22206865696768743d2200000000000000000000000000000000000000000000600082015250565b7f223e3c2f7376673e000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060008201527f30302f737667222077696474683d220000000000000000000000000000000000602082015250565b7f22207374796c653d226261636b67726f756e643a000000000000000000000000600082015250565b7f7b2274726169745f74797065223a202244617461204c656e677468222c20227660008201527f616c7565223a0000000000000000000000000000000000000000000000000000602082015250565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600082015250565b61176c8161133b565b811461177757600080fd5b50565b61178381611385565b811461178e57600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f697066733a2f2f6261666b72656961676265613472736835797477357a32626d3773336e6632337a736e67743469796868347768336232686f7464676d377876796da26469706673582212209eed5bbe95866a8de869ee6b1bc6ebea387b1a81100c76c64368f013c4ad264964736f6c63430008040033';

type BackgroundSvgRendererConstructorParams =
  | [
      linkLibraryAddresses: BackgroundSvgRendererLibraryAddresses,
      signer?: Signer,
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BackgroundSvgRendererConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === 'string' ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    '_isInterface' in xs[0]
  );
};

export class BackgroundSvgRenderer__factory extends ContractFactory {
  constructor(...args: BackgroundSvgRendererConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        BackgroundSvgRenderer__factory.linkBytecode(linkLibraryAddresses),
        signer,
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: BackgroundSvgRendererLibraryAddresses,
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp('__\\$8d2f2c422d7739f572e222809bbf6b68c3\\$__', 'g'),
      linkLibraryAddresses['contracts/libraries/SvgUtils.sol:SvgUtils']
        .replace(/^0x/, '')
        .toLowerCase(),
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<BackgroundSvgRenderer> {
    return super.deploy(overrides || {}) as Promise<BackgroundSvgRenderer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BackgroundSvgRenderer {
    return super.attach(address) as BackgroundSvgRenderer;
  }
  override connect(signer: Signer): BackgroundSvgRenderer__factory {
    return super.connect(signer) as BackgroundSvgRenderer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BackgroundSvgRendererInterface {
    return new utils.Interface(_abi) as BackgroundSvgRendererInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): BackgroundSvgRenderer {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as BackgroundSvgRenderer;
  }
}

export interface BackgroundSvgRendererLibraryAddresses {
  ['contracts/libraries/SvgUtils.sol:SvgUtils']: string;
}
