/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';
import type { PromiseOrValue } from '../../../common';
import type {
  BrainFuckVM,
  BrainFuckVMInterface,
} from '../../../contracts/vms/BrainFuckVM';

const _abi = [
  {
    inputs: [],
    name: 'LOOPING_STACK_SIZE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'TAPE_SIZE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'code',
        type: 'bytes',
      },
      {
        internalType: 'bytes',
        name: 'input',
        type: 'bytes',
      },
    ],
    name: 'run',
    outputs: [
      {
        internalType: 'bytes',
        name: 'out',
        type: 'bytes',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610f32806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306fdde031461005157806329b9e6a51461006f578063e0006a611461009f578063ffec62f9146100bd575b600080fd5b6100596100db565b6040516100669190610caa565b60405180910390f35b61008960048036038101906100849190610b22565b610118565b6040516100969190610c88565b60405180910390f35b6100a7610acb565b6040516100b49190610ccc565b60405180910390f35b6100c5610ad1565b6040516100d29190610ccc565b60405180910390f35b60606040518060400160405280600a81526020017f427261696e6675636b2100000000000000000000000000000000000000000000815250905090565b60606040518060200160405280600081525090506000620493e067ffffffffffffffff811115610171577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156101a35781602001600182028036833780820191505090505b509050600080600080600061200067ffffffffffffffff8111156101f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561021e5781602001602082028036833780820191505090505b5090506000805b8c8c9050811015610abb5760008d8d8381811061026b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b9050851561030f57605b60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156102ba5784806102b690610e69565b9550505b605d60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561030a5760008514156102fa5760009550610309565b848061030590610e3f565b9550505b5b610aa9565b602b60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156104995760ff60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191689888151811061039d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461042a57600189888151811061040a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b60f81c6104229190610d2a565b60f81b610430565b600060f81b5b898881518110610469577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b602d60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561062357600060f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916898881518110610527577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146105b4576001898881518110610594577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b60f81c6105ac9190610d95565b60f81b6105ba565b60ff60f81b5b8988815181106105f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b602c60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415610720578b8b9050881061066557600060f81b6106a9565b8b8b8981811061069e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b5b8988815181106106e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878061071c90610e69565b9850505b602e60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156107b65789898881518110610788577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b6040516020016107a4929190610c60565b60405160208183030381529060405299505b602160f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156107e957600096505b603e60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561082657868061082290610e69565b9750505b603c60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561086357868061085f90610e3f565b9750505b605b60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561096157600060f81b8988815181106108cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561090b5760019550610960565b81848481518110610945577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050828061095c90610e69565b9350505b5b605d60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415610aa857600060f81b8988815181106109cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610a535783600184610a0d9190610d61565b81518110610a44577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519150610aa7565b6000848480610a6190610e3f565b955081518110610a9a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250505b5b5b5080610ab490610e69565b9050610225565b5050505050505050949350505050565b61200081565b620493e081565b60008083601f840112610aea57600080fd5b8235905067ffffffffffffffff811115610b0357600080fd5b602083019150836001820283011115610b1b57600080fd5b9250929050565b60008060008060408587031215610b3857600080fd5b600085013567ffffffffffffffff811115610b5257600080fd5b610b5e87828801610ad8565b9450945050602085013567ffffffffffffffff811115610b7d57600080fd5b610b8987828801610ad8565b925092505092959194509250565b610ba8610ba382610dc9565b610eb2565b82525050565b6000610bb982610ce7565b610bc38185610cfd565b9350610bd3818560208601610e0c565b610bdc81610eeb565b840191505092915050565b6000610bf282610ce7565b610bfc8185610d0e565b9350610c0c818560208601610e0c565b80840191505092915050565b6000610c2382610cf2565b610c2d8185610d19565b9350610c3d818560208601610e0c565b610c4681610eeb565b840191505092915050565b610c5a81610df5565b82525050565b6000610c6c8285610be7565b9150610c788284610b97565b6001820191508190509392505050565b60006020820190508181036000830152610ca28184610bae565b905092915050565b60006020820190508181036000830152610cc48184610c18565b905092915050565b6000602082019050610ce16000830184610c51565b92915050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610d3582610dff565b9150610d4083610dff565b92508260ff03821115610d5657610d55610ebc565b5b828201905092915050565b6000610d6c82610df5565b9150610d7783610df5565b925082821015610d8a57610d89610ebc565b5b828203905092915050565b6000610da082610dff565b9150610dab83610dff565b925082821015610dbe57610dbd610ebc565b5b828203905092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610e2a578082015181840152602081019050610e0f565b83811115610e39576000848401525b50505050565b6000610e4a82610df5565b91506000821415610e5e57610e5d610ebc565b5b600182039050919050565b6000610e7482610df5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ea757610ea6610ebc565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f830116905091905056fea2646970667358221220d7e7fba70a03b2f59995318da4f39cfad8d9adc171594070faeb27908b083cc364736f6c63430008040033';

type BrainFuckVMConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BrainFuckVMConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BrainFuckVM__factory extends ContractFactory {
  constructor(...args: BrainFuckVMConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<BrainFuckVM> {
    return super.deploy(overrides || {}) as Promise<BrainFuckVM>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BrainFuckVM {
    return super.attach(address) as BrainFuckVM;
  }
  override connect(signer: Signer): BrainFuckVM__factory {
    return super.connect(signer) as BrainFuckVM__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BrainFuckVMInterface {
    return new utils.Interface(_abi) as BrainFuckVMInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): BrainFuckVM {
    return new Contract(address, _abi, signerOrProvider) as BrainFuckVM;
  }
}
