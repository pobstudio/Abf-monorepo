/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';
import type { PromiseOrValue } from '../../../common';
import type {
  Create3,
  Create3Interface,
} from '../../../contracts/libraries/Create3';

const _abi = [
  {
    inputs: [],
    name: 'ErrorCreatingContract',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ErrorCreatingProxy',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TargetAlreadyExists',
    type: 'error',
  },
];

const _bytecode =
  '0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207c5537e8c221dfeab71ba9870703a208e1afaedfe3ee0ab0a74b648f59ed9a9564736f6c63430008040033';

type Create3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Create3ConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Create3__factory extends ContractFactory {
  constructor(...args: Create3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<Create3> {
    return super.deploy(overrides || {}) as Promise<Create3>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Create3 {
    return super.attach(address) as Create3;
  }
  override connect(signer: Signer): Create3__factory {
    return super.connect(signer) as Create3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Create3Interface {
    return new utils.Interface(_abi) as Create3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): Create3 {
    return new Contract(address, _abi, signerOrProvider) as Create3;
  }
}
