/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';
import type { PromiseOrValue } from '../../../common';
import type {
  SvgUtils,
  SvgUtilsInterface,
} from '../../../contracts/libraries/SvgUtils';

const _abi = [
  {
    inputs: [],
    name: 'DECIMALS',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ONE_UNIT',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'n',
        type: 'uint256',
      },
    ],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'min',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'max',
        type: 'uint256',
      },
      {
        internalType: 'bytes1',
        name: 'scale',
        type: 'bytes1',
      },
    ],
    name: 'lerpWithDecimals',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 's',
        type: 'string',
      },
      {
        internalType: 'uint256',
        name: 'len',
        type: 'uint256',
      },
    ],
    name: 'padZeros',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'toColorHexString',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes1',
        name: 'r',
        type: 'bytes1',
      },
      {
        internalType: 'bytes1',
        name: 'g',
        type: 'bytes1',
      },
      {
        internalType: 'bytes1',
        name: 'b',
        type: 'bytes1',
      },
    ],
    name: 'toColorHexStringByBytes',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes3',
        name: 'rgb',
        type: 'bytes3',
      },
    ],
    name: 'toColorHexStringByBytes3',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'n',
        type: 'uint256',
      },
    ],
    name: 'toDecimalString',
    outputs: [
      {
        internalType: 'string',
        name: 's',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'n',
        type: 'uint256',
      },
    ],
    name: 'wholeNumber',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x6119ac610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c80638fc2908e116100705780638fc2908e1461018b578063c5d0e1cf146101bb578063d29d1d77146101eb578063e4eca9d61461021b578063eb43af001461024b576100a8565b80632e0f2625146100ad5780633f47e662146100cb5780634de45dca146100fb5780635f47386a1461012b5780637be7619a1461015b575b600080fd5b6100b5610269565b6040516100c29190611363565b60405180910390f35b6100e560048036038101906100e09190611176565b61026e565b6040516100f29190611363565b60405180910390f35b61011560048036038101906101109190611176565b610290565b6040516101229190611363565b60405180910390f35b610145600480360381019061014091906110aa565b6102b2565b6040516101529190611321565b60405180910390f35b6101756004803603810190610170919061119f565b610916565b6040516101829190611363565b60405180910390f35b6101a560048036038101906101a09190611122565b610a27565b6040516101b29190611321565b60405180910390f35b6101d560048036038101906101d09190611176565b610a7d565b6040516101e29190611321565b60405180910390f35b610205600480360381019061020091906110f9565b610cbe565b6040516102129190611321565b60405180910390f35b61023560048036038101906102309190611176565b610d89565b6040516102429190611321565b60405180910390f35b610253610e45565b6040516102609190611363565b60405180910390f35b600481565b60006004600a61027e91906114e6565b8261028991906117da565b9050919050565b60006004600a6102a091906114e6565b826102ab9190611462565b9050919050565b60606000600767ffffffffffffffff8111156102f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156103295781602001600182028036833780820191505090505b5090507f230000000000000000000000000000000000000000000000000000000000000081600081518110610387577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f3031323334353637383961626364656600000000000000000000000000000000600f8660f81c1660ff1660108110610418577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b81600281518110610456577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506004857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c94507f3031323334353637383961626364656600000000000000000000000000000000600f8660f81c1660ff1660108110610510577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8160018151811061054e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f3031323334353637383961626364656600000000000000000000000000000000600f8560f81c1660ff16601081106105df577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8160048151811061061d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506004847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c93507f3031323334353637383961626364656600000000000000000000000000000000600f8560f81c1660ff16601081106106d7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b81600381518110610715577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f3031323334353637383961626364656600000000000000000000000000000000600f8460f81c1660ff16601081106107a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b816006815181106107e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506004837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c92507f3031323334353637383961626364656600000000000000000000000000000000600f8460f81c1660ff166010811061089e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b816005815181106108dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350809150509392505050565b60008060f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415610965576004600a61095391906114e6565b8461095e9190611604565b9050610a20565b60ff60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156109b3576004600a6109a191906114e6565b836109ac9190611604565b9050610a20565b600060ff8360f81c60ff166004600a6109cc91906114e6565b87876109d8919061165e565b6109e29190611604565b6109ec9190611604565b6109f69190611462565b9050806004600a610a0791906114e6565b86610a129190611604565b610a1c919061140c565b9150505b9392505050565b606060008351905060008490505b83821015610a725780604051602001610a4e91906112ff565b60405160208183030381529060405290508180610a6a90611791565b925050610a35565b809250505092915050565b60606000600767ffffffffffffffff811115610ac2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610af45781602001600182028036833780820191505090505b5090507f230000000000000000000000000000000000000000000000000000000000000081600081518110610b52577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600690505b6000811115610c71577f3031323334353637383961626364656600000000000000000000000000000000600f851660108110610bed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110610c2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600484901c935080610c6a90611736565b9050610b88565b5060008314610cb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cac90611343565b60405180910390fd5b80915050919050565b6060610d8282600060038110610cfd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b83600160038110610d3b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b84600260038110610d79577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b6102b2565b9050919050565b60606000821415610dd1576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610e40565b610df26004600a610de291906114e6565b83610ded9190611462565b610e56565b610e1d610e166004600a610e0691906114e6565b85610e1191906117da565b610e56565b6004610a27565b604051602001610e2e9291906112d0565b60405160208183030381529060405290505b919050565b6004600a610e5391906114e6565b81565b60606000821415610e9e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610ffe565b600082905060005b60008214610ed0578080610eb990611791565b915050600a82610ec99190611462565b9150610ea6565b60008167ffffffffffffffff811115610f12577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610f445781602001600182028036833780820191505090505b5090505b60008514610ff757600182610f5d919061165e565b9150600a85610f6c91906117da565b6030610f78919061140c565b60f81b818381518110610fb4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85610ff09190611462565b9450610f48565b8093505050505b919050565b6000611016611011846113a3565b61137e565b90508281526020810184848401111561102e57600080fd5b6110398482856116f4565b509392505050565b60008135905061105081611931565b92915050565b60008135905061106581611948565b92915050565b600082601f83011261107c57600080fd5b813561108c848260208601611003565b91505092915050565b6000813590506110a48161195f565b92915050565b6000806000606084860312156110bf57600080fd5b60006110cd86828701611041565b93505060206110de86828701611041565b92505060406110ef86828701611041565b9150509250925092565b60006020828403121561110b57600080fd5b600061111984828501611056565b91505092915050565b6000806040838503121561113557600080fd5b600083013567ffffffffffffffff81111561114f57600080fd5b61115b8582860161106b565b925050602061116c85828601611095565b9150509250929050565b60006020828403121561118857600080fd5b600061119684828501611095565b91505092915050565b6000806000606084860312156111b457600080fd5b60006111c286828701611095565b93505060206111d386828701611095565b92505060406111e486828701611041565b9150509250925092565b60006111f9826113d4565b61120381856113f0565b9350611213818560208601611703565b61121c81611898565b840191505092915050565b6000611232826113d4565b61123c8185611401565b935061124c818560208601611703565b80840191505092915050565b6000611265600183611401565b9150611270826118b6565b600182019050919050565b60006112886020836113df565b9150611293826118df565b602082019050919050565b60006112ab600183611401565b91506112b682611908565b600182019050919050565b6112ca816116ea565b82525050565b60006112dc8285611227565b91506112e78261129e565b91506112f38284611227565b91508190509392505050565b600061130a82611258565b91506113168284611227565b915081905092915050565b6000602082019050818103600083015261133b81846111ee565b905092915050565b6000602082019050818103600083015261135c8161127b565b9050919050565b600060208201905061137860008301846112c1565b92915050565b6000611388611399565b90506113948282611760565b919050565b6000604051905090565b600067ffffffffffffffff8211156113be576113bd611869565b5b6113c782611898565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611417826116ea565b9150611422836116ea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114575761145661180b565b5b828201905092915050565b600061146d826116ea565b9150611478836116ea565b9250826114885761148761183a565b5b828204905092915050565b6000808291508390505b60018511156114dd578086048111156114b9576114b861180b565b5b60018516156114c85780820291505b80810290506114d6856118a9565b945061149d565b94509492505050565b60006114f1826116ea565b91506114fc836116ea565b92506115297fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611531565b905092915050565b60008261154157600190506115fd565b8161154f57600090506115fd565b8160018114611565576002811461156f5761159e565b60019150506115fd565b60ff8411156115815761158061180b565b5b8360020a9150848211156115985761159761180b565b5b506115fd565b5060208310610133831016604e8410600b84101617156115d35782820a9050838111156115ce576115cd61180b565b5b6115fd565b6115e08484846001611493565b925090508184048111156115f7576115f661180b565b5b81810290505b9392505050565b600061160f826116ea565b915061161a836116ea565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116535761165261180b565b5b828202905092915050565b6000611669826116ea565b9150611674836116ea565b9250828210156116875761168661180b565b5b828203905092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b60007fffffff000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611721578082015181840152602081019050611706565b83811115611730576000848401525b50505050565b6000611741826116ea565b915060008214156117555761175461180b565b5b600182039050919050565b61176982611898565b810181811067ffffffffffffffff8211171561178857611787611869565b5b80604052505050565b600061179c826116ea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117cf576117ce61180b565b5b600182019050919050565b60006117e5826116ea565b91506117f0836116ea565b925082611800576117ff61183a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f3000000000000000000000000000000000000000000000000000000000000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f2e00000000000000000000000000000000000000000000000000000000000000600082015250565b61193a81611692565b811461194557600080fd5b50565b611951816116be565b811461195c57600080fd5b50565b611968816116ea565b811461197357600080fd5b5056fea26469706673582212203b72af7c49e7c205507e79561505562e8b1f8858481d6ec7086ede47ec05188564736f6c63430008040033';

type SvgUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SvgUtilsConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SvgUtils__factory extends ContractFactory {
  constructor(...args: SvgUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<SvgUtils> {
    return super.deploy(overrides || {}) as Promise<SvgUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SvgUtils {
    return super.attach(address) as SvgUtils;
  }
  override connect(signer: Signer): SvgUtils__factory {
    return super.connect(signer) as SvgUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SvgUtilsInterface {
    return new utils.Interface(_abi) as SvgUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): SvgUtils {
    return new Contract(address, _abi, signerOrProvider) as SvgUtils;
  }
}
