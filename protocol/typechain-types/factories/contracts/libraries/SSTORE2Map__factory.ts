/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';
import type { PromiseOrValue } from '../../../common';
import type {
  SSTORE2Map,
  SSTORE2MapInterface,
} from '../../../contracts/libraries/SSTORE2Map';

const _abi = [
  {
    inputs: [],
    name: 'WriteError',
    type: 'error',
  },
];

const _bytecode =
  '0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220af1c6c282c1a2117a3992b901e5a628ac86a791393ae804abd2852a7e7d6dabe64736f6c63430008040033';

type SSTORE2MapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SSTORE2MapConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SSTORE2Map__factory extends ContractFactory {
  constructor(...args: SSTORE2MapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<SSTORE2Map> {
    return super.deploy(overrides || {}) as Promise<SSTORE2Map>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SSTORE2Map {
    return super.attach(address) as SSTORE2Map;
  }
  override connect(signer: Signer): SSTORE2Map__factory {
    return super.connect(signer) as SSTORE2Map__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SSTORE2MapInterface {
    return new utils.Interface(_abi) as SSTORE2MapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): SSTORE2Map {
    return new Contract(address, _abi, signerOrProvider) as SSTORE2Map;
  }
}
