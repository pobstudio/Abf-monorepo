/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';
import type { PromiseOrValue } from '../../common';
import type {
  AbsBrainFuckMinter,
  AbsBrainFuckMinterInterface,
} from '../../contracts/AbsBrainFuckMinter';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'bool',
        name: 'isActive',
        type: 'bool',
      },
    ],
    name: 'ChangedIsActive',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: 'MAX_MINTING_PER_TX',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'abf',
    outputs: [
      {
        internalType: 'contract ERC721Z',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_abf',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'price',
            type: 'uint256',
          },
          {
            internalType: 'uint96',
            name: 'rendererRoyaltyFraction',
            type: 'uint96',
          },
          {
            internalType: 'address',
            name: 'whitelistToken',
            type: 'address',
          },
        ],
        internalType:
          'struct AbsBrainFuckMinter.CreateAbsBrainFuckMinterConfig',
        name: 'config',
        type: 'tuple',
      },
    ],
    name: 'init',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'isActive',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'isInit',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'numMints',
        type: 'uint256',
      },
    ],
    name: 'mint',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'price',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'rendererRoyaltyFraction',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'rendererRoyaltyTreasury',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bool',
        name: '_isActive',
        type: 'bool',
      },
    ],
    name: 'setIsActive',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_whitelistToken',
        type: 'address',
      },
    ],
    name: 'setWhitelistToken',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'treasuryProps',
    outputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'whitelistToken',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x60806040526000600460156101000a81548160ff02191690831515021790555034801561002b57600080fd5b5061004861003d61005460201b60201c565b61005c60201b60201c565b60018081905550610120565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6119e68061012f6000396000f3fe6080604052600436106100f35760003560e01c80639bc42f2d1161008a578063b145a5b811610059578063b145a5b8146102d3578063b21b96cc146102fe578063ce45a5fb14610329578063f2fde38b14610354576100f3565b80639bc42f2d1461022b578063a035b1fe14610256578063aa6296bb14610281578063afabc323146102aa576100f3565b806354c796ed116100c657806354c796ed146101935780636f2d0968146101be578063715018a6146101e95780638da5cb5b14610200576100f3565b806322f3e2d4146100f85780632750fc78146101235780632780e5a01461014c57806340c10f1914610177575b600080fd5b34801561010457600080fd5b5061010d61037d565b60405161011a919061132b565b60405180910390f35b34801561012f57600080fd5b5061014a6004803603810190610145919061108f565b610390565b005b34801561015857600080fd5b506101616103fb565b60405161016e9190611368565b60405180910390f35b610191600480360381019061018c9190611053565b610421565b005b34801561019f57600080fd5b506101a86109d6565b6040516101b591906112e7565b60405180910390f35b3480156101ca57600080fd5b506101d36109fc565b6040516101e091906112e7565b60405180910390f35b3480156101f557600080fd5b506101fe610a22565b005b34801561020c57600080fd5b50610215610a36565b60405161022291906112e7565b60405180910390f35b34801561023757600080fd5b50610240610a5f565b60405161024d9190611483565b60405180910390f35b34801561026257600080fd5b5061026b610a65565b6040516102789190611483565b60405180910390f35b34801561028d57600080fd5b506102a860048036038101906102a39190611004565b610a6b565b005b3480156102b657600080fd5b506102d160048036038101906102cc9190610fb2565b610b8e565b005b3480156102df57600080fd5b506102e8610bda565b6040516102f5919061132b565b60405180910390f35b34801561030a57600080fd5b50610313610bed565b6040516103209190611483565b60405180910390f35b34801561033557600080fd5b5061033e610bf2565b60405161034b9190611346565b60405180910390f35b34801561036057600080fd5b5061037b60048036038101906103769190610fb2565b610c9e565b005b600460149054906101000a900460ff1681565b610398610d22565b80600460146101000a81548160ff0219169083151502179055507fa087c8b791d7a9eaf08393fedb4bc4f0e697ebc3f2538f7184b505925a32489f600460149054906101000a900460ff166040516103f0919061132b565b60405180910390a150565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026001541415610467576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045e90611463565b60405180910390fd5b6002600181905550600460149054906101000a900460ff166104be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b5906113a3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806105c557506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161057391906112e7565b60206040518083038186803b15801561058b57600080fd5b505afa15801561059f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c391906110f9565b115b610604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fb90611423565b60405180910390fd5b6006811115610648576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063f906113e3565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e58306f983836040518363ffffffff1660e01b81526004016106a5929190611302565b600060405180830381600087803b1580156106bf57600080fd5b505af11580156106d3573d6000803e3d6000fd5b505050506000816002546106e7919061155d565b90503481111561072c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610723906113c3565b60405180910390fd5b6000600354141561084457600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561079f57600080fd5b505afa1580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d79190610fdb565b73ffffffffffffffffffffffffffffffffffffffff16816040516107fa906112d2565b60006040518083038185875af1925050503d8060008114610837576040519150601f19603f3d011682016040523d82523d6000602084013e61083c565b606091505b505050610978565b600061271060035483610857919061155d565b610861919061152c565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108cb57600080fd5b505afa1580156108df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109039190610fdb565b73ffffffffffffffffffffffffffffffffffffffff16818361092591906115b7565b604051610931906112d2565b60006040518083038185875af1925050503d806000811461096e576040519150601f19603f3d011682016040523d82523d6000602084013e610973565b606091505b505050505b3373ffffffffffffffffffffffffffffffffffffffff166108fc823461099e91906115b7565b9081150290604051600060405180830381858888f193505050501580156109c9573d6000803e3d6000fd5b5050600180819055505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610a2a610d22565b610a346000610da0565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60035481565b60025481565b600460159054906101000a900460ff1615610abb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab290611443565b60405180910390fd5b6001600460156101000a81548160ff021916908315150217905550610adf83610da0565b806000015160028190555080602001516bffffffffffffffffffffffff166003819055508060400151600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b610b96610d22565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460159054906101000a900460ff1681565b600681565b6060600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b94f82516040518163ffffffff1660e01b815260040160006040518083038186803b158015610c5c57600080fd5b505afa158015610c70573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c9991906110b8565b905090565b610ca6610d22565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0d90611383565b60405180910390fd5b610d1f81610da0565b50565b610d2a610e64565b73ffffffffffffffffffffffffffffffffffffffff16610d48610a36565b73ffffffffffffffffffffffffffffffffffffffff1614610d9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9590611403565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000610e7f610e7a846114c3565b61149e565b905082815260208101848484011115610e9757600080fd5b610ea284828561166f565b509392505050565b600081359050610eb981611954565b92915050565b600081519050610ece81611954565b92915050565b600081359050610ee38161196b565b92915050565b600082601f830112610efa57600080fd5b8151610f0a848260208601610e6c565b91505092915050565b600060608284031215610f2557600080fd5b610f2f606061149e565b90506000610f3f84828501610f73565b6000830152506020610f5384828501610f9d565b6020830152506040610f6784828501610eaa565b60408301525092915050565b600081359050610f8281611982565b92915050565b600081519050610f9781611982565b92915050565b600081359050610fac81611999565b92915050565b600060208284031215610fc457600080fd5b6000610fd284828501610eaa565b91505092915050565b600060208284031215610fed57600080fd5b6000610ffb84828501610ebf565b91505092915050565b600080600060a0848603121561101957600080fd5b600061102786828701610eaa565b935050602061103886828701610eaa565b925050604061104986828701610f13565b9150509250925092565b6000806040838503121561106657600080fd5b600061107485828601610eaa565b925050602061108585828601610f73565b9150509250929050565b6000602082840312156110a157600080fd5b60006110af84828501610ed4565b91505092915050565b6000602082840312156110ca57600080fd5b600082015167ffffffffffffffff8111156110e457600080fd5b6110f084828501610ee9565b91505092915050565b60006020828403121561110b57600080fd5b600061111984828501610f88565b91505092915050565b61112b816115eb565b82525050565b61113a816115fd565b82525050565b600061114b826114f4565b61115581856114ff565b935061116581856020860161166f565b61116e81611760565b840191505092915050565b6111828161164b565b82525050565b600061119560268361151b565b91506111a082611771565b604082019050919050565b60006111b860228361151b565b91506111c3826117c0565b604082019050919050565b60006111db60228361151b565b91506111e68261180f565b604082019050919050565b60006111fe60268361151b565b91506112098261185e565b604082019050919050565b600061122160208361151b565b915061122c826118ad565b602082019050919050565b6000611244600083611510565b915061124f826118d6565b600082019050919050565b6000611267600f8361151b565b9150611272826118d9565b602082019050919050565b600061128a60208361151b565b915061129582611902565b602082019050919050565b60006112ad601f8361151b565b91506112b88261192b565b602082019050919050565b6112cc81611629565b82525050565b60006112dd82611237565b9150819050919050565b60006020820190506112fc6000830184611122565b92915050565b60006040820190506113176000830185611122565b61132460208301846112c3565b9392505050565b60006020820190506113406000830184611131565b92915050565b600060208201905081810360008301526113608184611140565b905092915050565b600060208201905061137d6000830184611179565b92915050565b6000602082019050818103600083015261139c81611188565b9050919050565b600060208201905081810360008301526113bc816111ab565b9050919050565b600060208201905081810360008301526113dc816111ce565b9050919050565b600060208201905081810360008301526113fc816111f1565b9050919050565b6000602082019050818103600083015261141c81611214565b9050919050565b6000602082019050818103600083015261143c8161125a565b9050919050565b6000602082019050818103600083015261145c8161127d565b9050919050565b6000602082019050818103600083015261147c816112a0565b9050919050565b600060208201905061149860008301846112c3565b92915050565b60006114a86114b9565b90506114b482826116a2565b919050565b6000604051905090565b600067ffffffffffffffff8211156114de576114dd611731565b5b6114e782611760565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061153782611629565b915061154283611629565b92508261155257611551611702565b5b828204905092915050565b600061156882611629565b915061157383611629565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115ac576115ab6116d3565b5b828202905092915050565b60006115c282611629565b91506115cd83611629565b9250828210156115e0576115df6116d3565b5b828203905092915050565b60006115f682611609565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b60006116568261165d565b9050919050565b600061166882611609565b9050919050565b60005b8381101561168d578082015181840152602081019050611672565b8381111561169c576000848401525b50505050565b6116ab82611760565b810181811067ffffffffffffffff821117156116ca576116c9611731565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f6d696e74696e67206e6565647320746f2062652061637469766520746f206d6960008201527f6e74000000000000000000000000000000000000000000000000000000000000602082015250565b7f696e73756666696369656e742066756e647320746f2070617920666f72206d6960008201527f6e74000000000000000000000000000000000000000000000000000000000000602082015250565b7f6578636565646564206e756d626572206f66206d696e7420696e2073696e676c60008201527f652063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b50565b7f6e6f742077686974656c69737465640000000000000000000000000000000000600082015250565b7f4e46542068617320616c7265616479206265656e20696e697469616c697a6564600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61195d816115eb565b811461196857600080fd5b50565b611974816115fd565b811461197f57600080fd5b50565b61198b81611629565b811461199657600080fd5b50565b6119a281611633565b81146119ad57600080fd5b5056fea26469706673582212200e3a767c31c48e2e335d4854750b5adb83555c3c71cf808b0036dd834be9707a64736f6c63430008040033';

type AbsBrainFuckMinterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AbsBrainFuckMinterConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AbsBrainFuckMinter__factory extends ContractFactory {
  constructor(...args: AbsBrainFuckMinterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<AbsBrainFuckMinter> {
    return super.deploy(overrides || {}) as Promise<AbsBrainFuckMinter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AbsBrainFuckMinter {
    return super.attach(address) as AbsBrainFuckMinter;
  }
  override connect(signer: Signer): AbsBrainFuckMinter__factory {
    return super.connect(signer) as AbsBrainFuckMinter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AbsBrainFuckMinterInterface {
    return new utils.Interface(_abi) as AbsBrainFuckMinterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): AbsBrainFuckMinter {
    return new Contract(address, _abi, signerOrProvider) as AbsBrainFuckMinter;
  }
}
