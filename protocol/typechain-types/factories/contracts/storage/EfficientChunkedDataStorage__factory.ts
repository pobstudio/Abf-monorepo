/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import {
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
  Signer,
  utils,
} from 'ethers';
import type { PromiseOrValue } from '../../../common';
import type {
  EfficientChunkedDataStorage,
  EfficientChunkedDataStorageInterface,
} from '../../../contracts/storage/EfficientChunkedDataStorage';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_dataSize',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_chunkSize',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'ErrorCreatingContract',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ErrorCreatingProxy',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_size',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_start',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_end',
        type: 'uint256',
      },
    ],
    name: 'InvalidCodeAtRange',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TargetAlreadyExists',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: 'MAX_UINT_16',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes[]',
        name: 'data',
        type: 'bytes[]',
      },
    ],
    name: 'batchAddChunkedData',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'chunkSize',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'currentMaxChunksIndex',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'dataSize',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'index',
        type: 'uint256',
      },
    ],
    name: 'indexToData',
    outputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405260006003553480156200001657600080fd5b5060405162001b6f38038062001b6f83398181016040528101906200003c919062000155565b6200005c620000506200007260201b60201c565b6200007a60201b60201c565b81600281905550806001819055505050620001ba565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200014f81620001a0565b92915050565b600080604083850312156200016957600080fd5b600062000179858286016200013e565b92505060206200018c858286016200013e565b9150509250929050565b6000819050919050565b620001ab8162000196565b8114620001b757600080fd5b50565b6119a580620001ca6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063715018a611610066578063715018a61461015b5780638da5cb5b14610165578063a34da31814610183578063c4a942cb146101a1578063f2fde38b146101bf5761009e565b806301ffc9a7146100a357806318ed981a146100d3578063315dbf931461010357806349ce468d1461011f5780635046f0711461013d575b600080fd5b6100bd60048036038101906100b89190610daf565b6101db565b6040516100ca91906111e6565b60405180910390f35b6100ed60048036038101906100e89190610dd8565b610255565b6040516100fa919061122a565b60405180910390f35b61011d60048036038101906101189190610d6a565b6102f4565b005b6101276104a4565b604051610134919061130c565b60405180910390f35b6101456104aa565b604051610152919061130c565b60405180910390f35b6101636104b0565b005b61016d6104c4565b60405161017a91906111cb565b60405180910390f35b61018b6104ed565b604051610198919061130c565b60405180910390f35b6101a96104f3565b6040516101b6919061130c565b60405180910390f35b6101d960048036038101906101d49190610d41565b6104f9565b005b60007f18ed981a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061024e575061024d8261057d565b5b9050919050565b6060600060015483610267919061144e565b90506000600154846102799190611632565b905060006102898360001b6105e7565b905060006002548361029b919061147f565b90508151600254826102ad91906113f8565b111580156102bb5750815181105b156102d8576102cd828260025461062c565b9450505050506102ef565b604051806020016040528060008152509450505050505b919050565b6102fc61074a565b600154828290501115610344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033b906112ec565b60405180910390fd5b600060405180602001604052806000815250905060005b83839050811015610476576002548484838181106103a2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020028101906103b4919061135e565b9050146103f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ed9061128c565b60405180910390fd5b81848483818110610430577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610442919061135e565b604051602001610454939291906110cc565b60405160208183030381529060405291508061046f906115a9565b905061035b565b5061048660035460001b826107c8565b506003600081548092919061049a906115a9565b9190505550505050565b60025481565b60035481565b6104b861074a565b6104c26000610810565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61ffff81565b60015481565b61050161074a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610571576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105689061124c565b60405180910390fd5b61057a81610810565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60606106256105fd6105f8846108d4565b610929565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6109b1565b9050919050565b606081601f8361063c91906113f8565b101561067d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106749061126c565b60405180910390fd5b818361068991906113f8565b845110156106cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c3906112cc565b60405180910390fd5b60608215600081146106ed576040519150600082526020820160405261073e565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561072b578051835260208301925060208101905061070e565b50868552601f19601f8301166040525050505b50809150509392505050565b610752610a97565b73ffffffffffffffffffffffffffffffffffffffff166107706104c4565b73ffffffffffffffffffffffffffffffffffffffff16146107c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bd906112ac565b60405180910390fd5b565b6000806107f3836040516020016107df91906111a9565b604051602081830303815290604052610a9f565b9050610807610801856108d4565b82610acb565b91505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60007fd351a9253491dfef66f53115e9e3afda3b5fdef08a1de6937da91188ec553be560001b8260405160200161090c929190611201565b604051602081830303815290604052805190602001209050919050565b60008030837f21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f60001b60405160200161096493929190611161565b6040516020818303038152906040528051906020012060001c9050806040516020016109909190611130565b6040516020818303038152906040528051906020012060001c915050919050565b606060006109be85610ae1565b905060008114156109e15760405180602001604052806000815250915050610a90565b80841115610a015760405180602001604052806000815250915050610a90565b83831015610a4a578084846040517f2c4a89fa000000000000000000000000000000000000000000000000000000008152600401610a4193929190611327565b60405180910390fd5b60008484039050600085830390506000828210610a675782610a69565b815b90506040519450601f19601f60208301011685016040528085528087602087018a3c505050505b9392505050565b600033905090565b6060815182604051602001610ab59291906110f2565b6040516020818303038152906040529050919050565b6000610ad983836000610aec565b905092915050565b6000813b9050919050565b6000806040518060400160405280601081526020017f67363d3d37363d34f03d5260086018f3000000000000000000000000000000008152509050610b3085610929565b91506000610b3d83610cad565b14610b74576040517fcd43efa100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000858251602084016000f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610be9576040517fbbd2fe8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff168587604051610c1191906110b5565b60006040518083038185875af1925050503d8060008114610c4e576040519150601f19603f3d011682016040523d82523d6000602084013e610c53565b606091505b50509050801580610c6c57506000610c6a85610cad565b145b15610ca3576040517f53de54b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050509392505050565b6000813b9050919050565b600081359050610cc78161192a565b92915050565b60008083601f840112610cdf57600080fd5b8235905067ffffffffffffffff811115610cf857600080fd5b602083019150836020820283011115610d1057600080fd5b9250929050565b600081359050610d2681611941565b92915050565b600081359050610d3b81611958565b92915050565b600060208284031215610d5357600080fd5b6000610d6184828501610cb8565b91505092915050565b60008060208385031215610d7d57600080fd5b600083013567ffffffffffffffff811115610d9757600080fd5b610da385828601610ccd565b92509250509250929050565b600060208284031215610dc157600080fd5b6000610dcf84828501610d17565b91505092915050565b600060208284031215610dea57600080fd5b6000610df884828501610d2c565b91505092915050565b610e0a816114d9565b82525050565b610e21610e1c826114d9565b6115f2565b82525050565b610e30816114eb565b82525050565b610e3f816114f7565b82525050565b610e56610e51826114f7565b611604565b82525050565b6000610e6883856113d1565b9350610e75838584611567565b82840190509392505050565b6000610e8c826113b5565b610e9681856113c0565b9350610ea6818560208601611576565b610eaf816116c1565b840191505092915050565b6000610ec5826113b5565b610ecf81856113d1565b9350610edf818560208601611576565b80840191505092915050565b6000610ef86001836113ed565b9150610f03826116ec565b600182019050919050565b6000610f1b6026836113dc565b9150610f2682611715565b604082019050919050565b6000610f3e6002836113ed565b9150610f4982611764565b600282019050919050565b6000610f61600e836113dc565b9150610f6c8261178d565b602082019050919050565b6000610f846001836113ed565b9150610f8f826117b6565b600182019050919050565b6000610fa7602f836113dc565b9150610fb2826117df565b604082019050919050565b6000610fca6001836113ed565b9150610fd58261182e565b600182019050919050565b6000610fed6020836113dc565b9150610ff882611857565b602082019050919050565b60006110106001836113ed565b915061101b82611880565b600182019050919050565b60006110336011836113dc565b915061103e82611889565b602082019050919050565b60006110566009836113ed565b9150611061826118b2565b600982019050919050565b6000611079603c836113dc565b9150611084826118db565b604082019050919050565b6110988161154d565b82525050565b6110af6110aa82611557565b611620565b82525050565b60006110c18284610eba565b915081905092915050565b60006110d88286610eba565b91506110e5828486610e5c565b9150819050949350505050565b60006110fd82610eeb565b9150611109828561109e565b60048201915061111882611049565b91506111248284610eba565b91508190509392505050565b600061113b82610f31565b91506111478284610e10565b60148201915061115682610f77565b915081905092915050565b600061116c82610fbd565b91506111788286610e10565b6014820191506111888285610e45565b6020820191506111988284610e45565b602082019150819050949350505050565b60006111b482611003565b91506111c08284610eba565b915081905092915050565b60006020820190506111e06000830184610e01565b92915050565b60006020820190506111fb6000830184610e27565b92915050565b60006040820190506112166000830185610e36565b6112236020830184610e36565b9392505050565b600060208201905081810360008301526112448184610e81565b905092915050565b6000602082019050818103600083015261126581610f0e565b9050919050565b6000602082019050818103600083015261128581610f54565b9050919050565b600060208201905081810360008301526112a581610f9a565b9050919050565b600060208201905081810360008301526112c581610fe0565b9050919050565b600060208201905081810360008301526112e581611026565b9050919050565b600060208201905081810360008301526113058161106c565b9050919050565b6000602082019050611321600083018461108f565b92915050565b600060608201905061133c600083018661108f565b611349602083018561108f565b611356604083018461108f565b949350505050565b6000808335600160200384360303811261137757600080fd5b80840192508235915067ffffffffffffffff82111561139557600080fd5b6020830192506001820236038313156113ad57600080fd5b509250929050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006114038261154d565b915061140e8361154d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561144357611442611663565b5b828201905092915050565b60006114598261154d565b91506114648361154d565b92508261147457611473611692565b5b828204905092915050565b600061148a8261154d565b91506114958361154d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156114ce576114cd611663565b5b828202905092915050565b60006114e48261152d565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b82818337600083830152505050565b60005b83811015611594578082015181840152602081019050611579565b838111156115a3576000848401525b50505050565b60006115b48261154d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156115e7576115e6611663565b5b600182019050919050565b60006115fd8261160e565b9050919050565b6000819050919050565b6000611619826116df565b9050919050565b600061162b826116d2565b9050919050565b600061163d8261154d565b91506116488361154d565b92508261165857611657611692565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160e01b9050919050565b60008160601b9050919050565b7f6300000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7fd694000000000000000000000000000000000000000000000000000000000000600082015250565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b7f0100000000000000000000000000000000000000000000000000000000000000600082015250565b7f456666696369656e744368756e6b65644461746153746f726167653a2064617460008201527f612073697a65206d69736d617463680000000000000000000000000000000000602082015250565b7fff00000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60008082015250565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b7f80600e6000396000f30000000000000000000000000000000000000000000000600082015250565b7f456666696369656e744368756e6b65644461746153746f726167653a2064617460008201527f61206973206e6f74206368756e6b53697a6520696e206c656e67746800000000602082015250565b611933816114d9565b811461193e57600080fd5b50565b61194a81611501565b811461195557600080fd5b50565b6119618161154d565b811461196c57600080fd5b5056fea2646970667358221220a77ce1683cbcaf1b51922b4f33c3182535356b207e2b8328d1b162dcec9101c064736f6c63430008040033';

type EfficientChunkedDataStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EfficientChunkedDataStorageConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EfficientChunkedDataStorage__factory extends ContractFactory {
  constructor(...args: EfficientChunkedDataStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _dataSize: PromiseOrValue<BigNumberish>,
    _chunkSize: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<EfficientChunkedDataStorage> {
    return super.deploy(
      _dataSize,
      _chunkSize,
      overrides || {},
    ) as Promise<EfficientChunkedDataStorage>;
  }
  override getDeployTransaction(
    _dataSize: PromiseOrValue<BigNumberish>,
    _chunkSize: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_dataSize, _chunkSize, overrides || {});
  }
  override attach(address: string): EfficientChunkedDataStorage {
    return super.attach(address) as EfficientChunkedDataStorage;
  }
  override connect(signer: Signer): EfficientChunkedDataStorage__factory {
    return super.connect(signer) as EfficientChunkedDataStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EfficientChunkedDataStorageInterface {
    return new utils.Interface(_abi) as EfficientChunkedDataStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): EfficientChunkedDataStorage {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as EfficientChunkedDataStorage;
  }
}
